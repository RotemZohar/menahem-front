/// <reference lib="webworker" />
/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.

import { clientsClaim } from "workbox-core";
import { createHandlerBoundToURL, precacheAndRoute } from "workbox-precaching";
import { registerRoute } from "workbox-routing";

declare const self: ServiceWorkerGlobalScope;

self.skipWaiting();
clientsClaim();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);

// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell

// eslint-disable-next-line prefer-regex-literals
const fileExtensionRegexp = new RegExp("/[^/?]+\\.[^/]+$");
registerRoute(
  // Return false to exempt requests from being fulfilled by index.html.
  ({ request, url }: { request: Request; url: URL }) => {
    // If this isn't a navigation, skip.
    if (request.mode !== "navigate") {
      return false;
    }

    // If this is a URL that starts with /_, skip.
    if (url.pathname.startsWith("/_")) {
      return false;
    }

    // If this looks like a URL for a resource, because it contains
    // a file extension, skip.
    if (url.pathname.match(fileExtensionRegexp)) {
      return false;
    }

    // Return true to signal that we want to use the handler.
    return true;
  },
  createHandlerBoundToURL(`${process.env.PUBLIC_URL}/index.html`)
);

// Any other custom service worker logic can go here.

/** When a push event is triggered, show notification through serviceWorker */
const onPush = (event: PushEvent) => {
  if (!event.data) return;

  const data = event.data.json();
  const { title, body, tag, url } = data;

  const notificationIsShown = self.registration.showNotification(title, {
    tag,
    body,
    data: { url },
    badge: "/favicon.ico",
    icon: "/logo192.png",
  });

  // Keep the service worker alive until the notification is created.
  event.waitUntil(notificationIsShown);
};

const onNotificationClick = (event: NotificationEvent) => {
  // Android doesn't close notifications when you click on them
  event.notification.close();

  event.waitUntil(self.clients.openWindow(event.notification.data.url));
};

self.addEventListener("push", onPush);
self.addEventListener("notificationclick", onNotificationClick);
